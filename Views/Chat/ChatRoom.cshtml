@model List<ChatAppMongo.Models.ChatMessage>
@using Microsoft.AspNetCore.Http
@{
    var currentUser = Context.Session.GetString("UserId");
    var friendUsername = ViewBag.FriendUsername as string ?? "Friend";
    var friendId = ViewBag.FriendId as string ?? "";
    Layout = null;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet">

<style>
    /* 🌐 Base layout */
    body {
        background-color: #f1f1f1;
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        background-color: #fff;
        width: 100%;
        max-width: 800px;
        height: 90vh;
        border-radius: 0;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    /* 📱 Mobile Optimization */
    @@media (max-width: 768px) {
        .chat-container

    {
        height: 100vh;
        border-radius: 0;
        box-shadow: none;
    }

    .chat-header {
        padding: 10px 12px;
        font-size: 16px;
    }

        .chat-header img {
            width: 40px;
            height: 40px;
        }

    .chat-input {
        padding: 8px;
    }

    #messageInput {
        font-size: 13px;
        padding: 8px 12px;
    }

    #sendBtn {
        width: 40px;
        height: 40px;
        font-size: 16px;
    }

    }

    /* 🧭 Header */
    .chat-header {
        background-color: #007bff;
        color: white;
        padding: 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-size: 18px;
        font-weight: 500;
        position: sticky;
        top: 0;
        z-index: 10;
    }

        .chat-header img {
            cursor: pointer;
            object-fit: cover;
            border: 2px solid white;
            border-radius: 50%;
        }

    /* 💬 Message Area */
    .chat-messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #eef3f8;
        display: flex;
        flex-direction: column;
        gap: 10px;
        scroll-behavior: smooth;
    }

    .message {
        max-width: 80%;
        padding: 10px 14px;
        border-radius: 16px;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.4;
        display: inline-block;
        position: relative;
    }

    .sent {
        background-color: #007bff;
        color: white;
        align-self: flex-end;
        border-top-right-radius: 4px;
    }

    .received {
        background-color: #ffffff;
        align-self: flex-start;
        border: 1px solid #ddd;
        border-top-left-radius: 4px;
    }

    .message small {
        display: block;
        text-align: right;
        font-size: 10px;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 4px;
    }

    .received small {
        color: gray;
    }

    /* 🧾 Input Area */
    .chat-input {
        display: flex;
        padding: 10px;
        background-color: #fff;
        border-top: 1px solid #ddd;
        position: sticky;
        bottom: 0;
    }

    #messageInput {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 10px 15px;
        outline: none;
        font-size: 14px;
    }

    #sendBtn {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        margin-left: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        cursor: pointer;
    }

        #sendBtn:hover {
            background-color: #0056b3;
        }

    /* 👤 Profile Modal */
    .modal-body img {
        border: 4px solid #007bff;
        width: 160px;
        height: 160px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

        .modal-body img:hover {
            transform: scale(1.05);
        }

</style>

<div class="chat-container">
    <!-- Header -->
    <div class="chat-header">
        <div class="d-flex align-items-center gap-2">
            <img id="friendPhoto" src="/images/default.png" alt="Profile" width="45" height="45"
                 data-bs-toggle="modal" data-bs-target="#profileModal" />
            <span id="friendUsername">@friendUsername</span>
        </div>
        <a href="/Chat/Friends" class="text-white fs-4 text-decoration-none">&times;</a>
    </div>

    <!-- Messages -->
    <div id="messages" class="chat-messages">
        @foreach (var msg in Model)
        {
            bool isSent = msg.SenderId == currentUser;
            <div class="message @(isSent ? "sent" : "received")" data-id="@msg.Id">
                @Html.Raw(System.Net.WebUtility.HtmlEncode(msg.Message))
                <small>@msg.Timestamp.ToLocalTime().ToString("hh:mm tt")</small>
            </div>
        }
    </div>

    <!-- Input -->
    <div class="chat-input">
        <input id="messageInput" type="text" placeholder="Type a message..." autocomplete="off" />
        <button id="sendBtn"><i class="fa fa-paper-plane"></i></button>
    </div>
</div>

<!-- Profile Modal -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-3 text-center">
            <div class="modal-header border-0">
                <h5 class="modal-title w-100 text-center">Friend Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <img id="modalPhoto" src="/images/default.png" class="rounded-circle mb-3" width="160" height="160" />
                <h6 id="modalUsername" class="fw-bold"></h6>
                <p id="modalEmail" class="text-muted mb-0"></p>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@7.0.5/dist/browser/signalr.min.js"></script>

<script>
    const currentUser = '@currentUser';
    const friendId = '@friendId';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    connection.on("ReceiveMessage", (senderId, message, messageId, timestamp) => {
        const div = document.createElement("div");
        const isSent = senderId === currentUser;
        div.className = `message ${isSent ? "sent" : "received"}`;
        div.setAttribute("data-id", messageId);
        const time = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        div.innerHTML = `${message}<small>${time}</small>`;
        const msgContainer = document.getElementById("messages");
        msgContainer.appendChild(div);
        msgContainer.scrollTop = msgContainer.scrollHeight;
    });

    connection.on("ClearChatClient", () => {
        document.getElementById("messages").innerHTML = "";
    });

    connection.start()
        .then(() => connection.invoke("JoinRoom", currentUser, friendId))
        .catch(err => console.error(err.toString()));

    document.getElementById("sendBtn").addEventListener("click", async () => {
        const input = document.getElementById("messageInput");
        const message = input.value.trim();
        if (!message) return;
        await connection.invoke("SendMessage", currentUser, friendId, message);
        input.value = "";
    });

    document.getElementById("messageInput").addEventListener("keypress", e => {
        if (e.key === "Enter") document.getElementById("sendBtn").click();
    });

    async function loadFriendProfile() {
        if (!friendId) return;
        try {
            const res = await fetch(`/Friend/Profile?userId=${friendId}`);
            const data = await res.json();
            if (data.success) {
                document.getElementById("friendUsername").textContent = data.username;
                document.getElementById("modalUsername").textContent = data.username;
                document.getElementById("modalEmail").textContent = data.email || "";
                const photo = data.photoUrl || "/images/default.png";
                document.getElementById("friendPhoto").src = photo;
                document.getElementById("modalPhoto").src = photo;
            }
        } catch (err) {
            console.error("Error loading friend profile:", err);
        }
    }

    loadFriendProfile();

        // Example group message send button
    document.getElementById("sendGroupBtn").addEventListener("click", async () => {
        const input = document.getElementById("groupMessageInput");
        const message = input.value.trim();
        if (!message) return;

        const groupId = currentGroupId; // set when opening a group chat
        await connection.invoke("SendGroupMessage", currentUser, groupId, message);
        input.value = "";
    });

    // Receiving group messages
    connection.on("ReceiveGroupMessage", (senderId, groupId, message, messageId, timestamp, fileUrl, fileType, fileName) => {
        if(groupId !== currentGroupId) return; // ignore other groups

        const div = document.createElement("div");
        const isSent = senderId === currentUser;
        div.className = `message ${isSent ? "sent" : "received"}`;
        div.setAttribute("data-id", messageId);

        if(fileUrl){
            div.innerHTML = `<a href="${fileUrl}" target="_blank">${fileName}</a><small>${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</small>`;
        } else {
            div.innerHTML = `${message}<small>${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</small>`;
        }

        const msgContainer = document.getElementById("messages");
        msgContainer.appendChild(div);
        msgContainer.scrollTop = msgContainer.scrollHeight;
    });

</script>
